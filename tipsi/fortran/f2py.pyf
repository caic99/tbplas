!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module f2py ! in 
    interface  ! in :f2py
        subroutine ldos_haydock(site_indices,n_siteind,delta,e_range,s_indptr,n_indptr,s_indices,n_indices,s_hop,n_hop,h_rescale,seed,n_depth,n_timestep,n_ran_samples,output_filename,energy,ldos) ! in :f2py:analysis.f90
            use const
            use random, only: random_state
            use csr
            use propagation, only: haydock_coef
            use funcs, only: green_function
            integer dimension(n_siteind),intent(in) :: site_indices
            integer, optional,intent(in),check(len(site_indices)>=n_siteind),depend(site_indices) :: n_siteind=len(site_indices)
            real(kind=8) intent(in) :: delta
            real(kind=8) intent(in) :: e_range
            integer dimension(n_indptr),intent(in) :: s_indptr
            integer, optional,intent(in),check(len(s_indptr)>=n_indptr),depend(s_indptr) :: n_indptr=len(s_indptr)
            integer dimension(n_indices),intent(in) :: s_indices
            integer, optional,intent(in),check(len(s_indices)>=n_indices),depend(s_indices) :: n_indices=len(s_indices)
            complex(kind=8) dimension(n_hop),intent(in) :: s_hop
            integer, optional,intent(in),check(len(s_hop)>=n_hop),depend(s_hop) :: n_hop=len(s_hop)
            real(kind=8) intent(in) :: h_rescale
            integer intent(in) :: seed
            integer intent(in) :: n_depth
            integer intent(in) :: n_timestep
            integer intent(in) :: n_ran_samples
            character*(*) intent(in) :: output_filename
            real(kind=8) dimension(2 * n_timestep + 1),intent(out),depend(n_timestep) :: energy
            real(kind=8) dimension(2 * n_timestep + 1),intent(out),depend(n_timestep) :: ldos
        end subroutine ldos_haydock
        subroutine cond_from_trace(mu_mn,n_kernel,mu,n_mu,h_rescale,beta,ne_integral,fermi_precision,prefactor,cond) ! in :f2py:analysis.f90
            use const, only: pi
            use kpm
            use funcs, only: fermi_dist
            complex(kind=8) dimension(n_kernel,n_kernel),intent(in) :: mu_mn
            integer, optional,intent(in),check(shape(mu_mn,0)==n_kernel),depend(mu_mn) :: n_kernel=shape(mu_mn,0)
            real(kind=8) dimension(n_mu),intent(in) :: mu
            integer, optional,intent(in),check(len(mu)>=n_mu),depend(mu) :: n_mu=len(mu)
            real(kind=8) intent(in) :: h_rescale
            real(kind=8) intent(in) :: beta
            integer intent(in) :: ne_integral
            real(kind=8) intent(in) :: fermi_precision
            real(kind=8) intent(in) :: prefactor
            real(kind=8) dimension(n_mu),intent(out),depend(n_mu) :: cond
        end subroutine cond_from_trace
        subroutine tbpm_dos(bes,n_bes,s_indptr,n_indptr,s_indices,n_indices,s_hop,n_hop,seed,n_timestep,n_ran_samples,output_filename,corr) ! in :f2py:tbpm.f90
            use math, only: inner_prod
            use random
            use csr
            use propagation
            real(kind=8) dimension(n_bes),intent(in) :: bes
            integer, optional,intent(in),check(len(bes)>=n_bes),depend(bes) :: n_bes=len(bes)
            integer dimension(n_indptr),intent(in) :: s_indptr
            integer, optional,intent(in),check(len(s_indptr)>=n_indptr),depend(s_indptr) :: n_indptr=len(s_indptr)
            integer dimension(n_indices),intent(in) :: s_indices
            integer, optional,intent(in),check(len(s_indices)>=n_indices),depend(s_indices) :: n_indices=len(s_indices)
            complex(kind=8) dimension(n_hop),intent(in) :: s_hop
            integer, optional,intent(in),check(len(s_hop)>=n_hop),depend(s_hop) :: n_hop=len(s_hop)
            integer intent(in) :: seed
            integer intent(in) :: n_timestep
            integer intent(in) :: n_ran_samples
            character*(*) intent(in) :: output_filename
            complex(kind=8) dimension(n_timestep),intent(out),depend(n_timestep) :: corr
        end subroutine tbpm_dos
        subroutine tbpm_ldos(site_indices,n_siteind,bes,n_bes,s_indptr,n_indptr,s_indices,n_indices,s_hop,n_hop,seed,n_timestep,n_ran_samples,output_filename,corr) ! in :f2py:tbpm.f90
            use math, only: inner_prod
            use random
            use csr
            use propagation
            integer dimension(n_siteind),intent(in) :: site_indices
            integer, optional,intent(in),check(len(site_indices)>=n_siteind),depend(site_indices) :: n_siteind=len(site_indices)
            real(kind=8) dimension(n_bes),intent(in) :: bes
            integer, optional,intent(in),check(len(bes)>=n_bes),depend(bes) :: n_bes=len(bes)
            integer dimension(n_indptr),intent(in) :: s_indptr
            integer, optional,intent(in),check(len(s_indptr)>=n_indptr),depend(s_indptr) :: n_indptr=len(s_indptr)
            integer dimension(n_indices),intent(in) :: s_indices
            integer, optional,intent(in),check(len(s_indices)>=n_indices),depend(s_indices) :: n_indices=len(s_indices)
            complex(kind=8) dimension(n_hop),intent(in) :: s_hop
            integer, optional,intent(in),check(len(s_hop)>=n_hop),depend(s_hop) :: n_hop=len(s_hop)
            integer intent(in) :: seed
            integer intent(in) :: n_timestep
            integer intent(in) :: n_ran_samples
            character*(*) intent(in) :: output_filename
            complex(kind=8) dimension(n_timestep + 1),intent(out),depend(n_timestep) :: corr
        end subroutine tbpm_ldos
        subroutine tbpm_accond(bes,n_bes,beta,mu,s_indptr,n_indptr,s_indices,n_indices,s_hop,n_hop,h_rescale,s_dx,n_dx,s_dy,n_dy,seed,n_timestep,n_ran_samples,nr_fermi,fermi_precision,output_filename,corr) ! in :f2py:tbpm.f90
            use math, only: inner_prod
            use random
            use csr
            use propagation
            use funcs
            real(kind=8) dimension(n_bes),intent(in) :: bes
            integer, optional,intent(in),check(len(bes)>=n_bes),depend(bes) :: n_bes=len(bes)
            real(kind=8) intent(in) :: beta
            real(kind=8) intent(in) :: mu
            integer dimension(n_indptr),intent(in) :: s_indptr
            integer, optional,intent(in),check(len(s_indptr)>=n_indptr),depend(s_indptr) :: n_indptr=len(s_indptr)
            integer dimension(n_indices),intent(in) :: s_indices
            integer, optional,intent(in),check(len(s_indices)>=n_indices),depend(s_indices) :: n_indices=len(s_indices)
            complex(kind=8) dimension(n_hop),intent(in) :: s_hop
            integer, optional,intent(in),check(len(s_hop)>=n_hop),depend(s_hop) :: n_hop=len(s_hop)
            real(kind=8) intent(in) :: h_rescale
            real(kind=8) dimension(n_dx),intent(in) :: s_dx
            integer, optional,intent(in),check(len(s_dx)>=n_dx),depend(s_dx) :: n_dx=len(s_dx)
            real(kind=8) dimension(n_dy),intent(in) :: s_dy
            integer, optional,intent(in),check(len(s_dy)>=n_dy),depend(s_dy) :: n_dy=len(s_dy)
            integer intent(in) :: seed
            integer intent(in) :: n_timestep
            integer intent(in) :: n_ran_samples
            integer intent(in) :: nr_fermi
            real(kind=8) intent(in) :: fermi_precision
            character*(*) intent(in) :: output_filename
            complex(kind=8) dimension(4,n_timestep),intent(out),depend(n_timestep) :: corr
        end subroutine tbpm_accond
        subroutine tbpm_dyn_pol(bes,n_bes,beta,mu,s_indptr,n_indptr,s_indices,n_indices,s_hop,n_hop,h_rescale,s_dx,n_dx,s_dy,n_dy,s_site_x,n_site_x,s_site_y,n_site_y,s_site_z,n_site_z,seed,n_timestep,n_ran_samples,nr_fermi,fermi_precision,q_points,n_q_points,output_filename,corr) ! in :f2py:tbpm.f90
            use math
            use random
            use csr
            use propagation
            use funcs
            real(kind=8) dimension(n_bes),intent(in) :: bes
            integer, optional,intent(in),check(len(bes)>=n_bes),depend(bes) :: n_bes=len(bes)
            real(kind=8) intent(in) :: beta
            real(kind=8) intent(in) :: mu
            integer dimension(n_indptr),intent(in) :: s_indptr
            integer, optional,intent(in),check(len(s_indptr)>=n_indptr),depend(s_indptr) :: n_indptr=len(s_indptr)
            integer dimension(n_indices),intent(in) :: s_indices
            integer, optional,intent(in),check(len(s_indices)>=n_indices),depend(s_indices) :: n_indices=len(s_indices)
            complex(kind=8) dimension(n_hop),intent(in) :: s_hop
            integer, optional,intent(in),check(len(s_hop)>=n_hop),depend(s_hop) :: n_hop=len(s_hop)
            real(kind=8) intent(in) :: h_rescale
            real(kind=8) dimension(n_dx),intent(in) :: s_dx
            integer, optional,intent(in),check(len(s_dx)>=n_dx),depend(s_dx) :: n_dx=len(s_dx)
            real(kind=8) dimension(n_dy),intent(in) :: s_dy
            integer, optional,intent(in),check(len(s_dy)>=n_dy),depend(s_dy) :: n_dy=len(s_dy)
            real(kind=8) dimension(n_site_x),intent(in) :: s_site_x
            integer, optional,intent(in),check(len(s_site_x)>=n_site_x),depend(s_site_x) :: n_site_x=len(s_site_x)
            real(kind=8) dimension(n_site_y),intent(in) :: s_site_y
            integer, optional,intent(in),check(len(s_site_y)>=n_site_y),depend(s_site_y) :: n_site_y=len(s_site_y)
            real(kind=8) dimension(n_site_z),intent(in) :: s_site_z
            integer, optional,intent(in),check(len(s_site_z)>=n_site_z),depend(s_site_z) :: n_site_z=len(s_site_z)
            integer intent(in) :: seed
            integer intent(in) :: n_timestep
            integer intent(in) :: n_ran_samples
            integer intent(in) :: nr_fermi
            real(kind=8) intent(in) :: fermi_precision
            real(kind=8) dimension(n_q_points,3),intent(in) :: q_points
            integer, optional,intent(in),check(shape(q_points,0)==n_q_points),depend(q_points) :: n_q_points=shape(q_points,0)
            character*(*) intent(in) :: output_filename
            real(kind=8) dimension(n_q_points,n_timestep),intent(out),depend(n_q_points,n_timestep) :: corr
        end subroutine tbpm_dyn_pol
        subroutine tbpm_dccond(bes,n_bes,beta,mu,s_indptr,n_indptr,s_indices,n_indices,s_hop,n_hop,h_rescale,s_dx,n_dx,s_dy,n_dy,seed,n_timestep,n_ran_samples,t_step,energies,n_energies,en_inds,n_en_inds,output_filename_dos,output_filename_dc,dos_corr,dc_corr) ! in :f2py:tbpm.f90
            use const
            use math
            use random
            use csr
            use propagation
            use funcs
            real(kind=8) dimension(n_bes),intent(in) :: bes
            integer, optional,intent(in),check(len(bes)>=n_bes),depend(bes) :: n_bes=len(bes)
            real(kind=8) intent(in) :: beta
            real(kind=8) intent(in) :: mu
            integer dimension(n_indptr),intent(in) :: s_indptr
            integer, optional,intent(in),check(len(s_indptr)>=n_indptr),depend(s_indptr) :: n_indptr=len(s_indptr)
            integer dimension(n_indices),intent(in) :: s_indices
            integer, optional,intent(in),check(len(s_indices)>=n_indices),depend(s_indices) :: n_indices=len(s_indices)
            complex(kind=8) dimension(n_hop),intent(in) :: s_hop
            integer, optional,intent(in),check(len(s_hop)>=n_hop),depend(s_hop) :: n_hop=len(s_hop)
            real(kind=8) intent(in) :: h_rescale
            real(kind=8) dimension(n_dx),intent(in) :: s_dx
            integer, optional,intent(in),check(len(s_dx)>=n_dx),depend(s_dx) :: n_dx=len(s_dx)
            real(kind=8) dimension(n_dy),intent(in) :: s_dy
            integer, optional,intent(in),check(len(s_dy)>=n_dy),depend(s_dy) :: n_dy=len(s_dy)
            integer intent(in) :: seed
            integer intent(in) :: n_timestep
            integer intent(in) :: n_ran_samples
            real(kind=8) intent(in) :: t_step
            real(kind=8) dimension(n_energies),intent(in) :: energies
            integer, optional,intent(in),check(len(energies)>=n_energies),depend(energies) :: n_energies=len(energies)
            integer dimension(n_en_inds),intent(in) :: en_inds
            integer, optional,intent(in),check(len(en_inds)>=n_en_inds),depend(en_inds) :: n_en_inds=len(en_inds)
            character*(*) intent(in) :: output_filename_dos
            character*(*) intent(in) :: output_filename_dc
            complex(kind=8) dimension(n_timestep),intent(out),depend(n_timestep) :: dos_corr
            complex(kind=8) dimension(2,n_energies,n_timestep),intent(out),depend(n_energies,n_timestep) :: dc_corr
        end subroutine tbpm_dccond
        subroutine tbpm_eigenstates(bes,n_bes,s_indptr,n_indptr,s_indices,n_indices,s_hop,n_hop,seed,n_timestep,n_ran_samples,t_step,energies,n_energies,wf_qe) ! in :f2py:tbpm.f90
            use const
            use math
            use random
            use csr
            use propagation
            real(kind=8) dimension(n_bes),intent(in) :: bes
            integer, optional,intent(in),check(len(bes)>=n_bes),depend(bes) :: n_bes=len(bes)
            integer dimension(n_indptr),intent(in) :: s_indptr
            integer, optional,intent(in),check(len(s_indptr)>=n_indptr),depend(s_indptr) :: n_indptr=len(s_indptr)
            integer dimension(n_indices),intent(in) :: s_indices
            integer, optional,intent(in),check(len(s_indices)>=n_indices),depend(s_indices) :: n_indices=len(s_indices)
            complex(kind=8) dimension(n_hop),intent(in) :: s_hop
            integer, optional,intent(in),check(len(s_hop)>=n_hop),depend(s_hop) :: n_hop=len(s_hop)
            integer intent(in) :: seed
            integer intent(in) :: n_timestep
            integer intent(in) :: n_ran_samples
            real(kind=8) intent(in) :: t_step
            real(kind=8) dimension(n_energies),intent(in) :: energies
            integer, optional,intent(in),check(len(energies)>=n_energies),depend(energies) :: n_energies=len(energies)
            real(kind=8) dimension(n_energies,n_indptr - 1),intent(out),depend(n_energies,n_indptr) :: wf_qe
        end subroutine tbpm_eigenstates
        subroutine tbpm_kbdc(seed,s_indptr,n_indptr,s_indices,n_indices,s_hop,n_hop,h_rescale,s_dx,n_dx,s_dy,n_dy,n_ran_samples,n_kernel,itypedc,corr_mu_avg) ! in :f2py:tbpm.f90
            use math
            use random
            use csr
            use propagation
            use funcs
            use kpm
            integer intent(in) :: seed
            integer dimension(n_indptr),intent(in) :: s_indptr
            integer, optional,intent(in),check(len(s_indptr)>=n_indptr),depend(s_indptr) :: n_indptr=len(s_indptr)
            integer dimension(n_indices),intent(in) :: s_indices
            integer, optional,intent(in),check(len(s_indices)>=n_indices),depend(s_indices) :: n_indices=len(s_indices)
            complex(kind=8) dimension(n_hop),intent(in) :: s_hop
            integer, optional,intent(in),check(len(s_hop)>=n_hop),depend(s_hop) :: n_hop=len(s_hop)
            real(kind=8) intent(in) :: h_rescale
            real(kind=8) dimension(n_dx),intent(in) :: s_dx
            integer, optional,intent(in),check(len(s_dx)>=n_dx),depend(s_dx) :: n_dx=len(s_dx)
            real(kind=8) dimension(n_dy),intent(in) :: s_dy
            integer, optional,intent(in),check(len(s_dy)>=n_dy),depend(s_dy) :: n_dy=len(s_dy)
            integer intent(in) :: n_ran_samples
            integer intent(in) :: n_kernel
            integer intent(in) :: itypedc
            complex(kind=8) dimension(n_kernel,n_kernel),intent(out),depend(n_kernel,n_kernel) :: corr_mu_avg
        end subroutine tbpm_kbdc
    end interface 
end python module f2py

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
